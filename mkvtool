#!/usr/bin/env ruby

require 'fileutils'
require 'optparse'
require 'ostruct'
require 'rexml/document'
require 'tempfile'

require 'ruby-progressbar'

module Equality
  def ==(other)
    self.class == other.class and self.state == other.state
  end

  def hash
    state.hash
  end

  protected
  def state()
    self.instance_variables.map do |var|
      self.instance_variable_get(var)
    end
  end
end

class Tags
  include Equality
  def initialize(tags = nil)
    @tags = {}

    if not tags.nil? then
      tags.each(&method(:<<))
    end
  end

  def +(tags)
    new_tags = @tags.merge(tags.state[0])
    return Tags.new(new_tags.values)
  end

  def <<(tag)
    @tags[tag.name.downcase.intern] = tag
  end

  def [](name)
    @tags[name]
  end

  def to_s()
    @tags.values.sort!.join("\n")
  end

  def to_xml()
    xml = REXML::Element.new("Tags")
    sub_xml = xml.add_element("Tag")
    @tags.each_value do |tag|
      sub_xml.add_element(tag.to_xml)
    end

    return xml
  end
end

class SimpleTag
  include Comparable
  attr_accessor :name, :string
  def initialize(name, string)
    @name = name.upcase
    @string = string
  end

  def <=>(other)
    c = @name <=> other.name
    if c == 0 then
      c = @string <=> other.string
    end

    return c
  end

  def value
    @string
  end

  def to_s()
    "#{@name}=#{@string}"
  end

  def to_xml()
    tag = REXML::Element.new("Simple")

    self.instance_variables.each do |var|
      name = var.to_s
      name[0] = ''
      name[0] = name[0].upcase

      value = self.instance_variable_get(var)

      child = tag.add_element(name)
      child.text = value
    end

    return tag
  end
end

def puts(*args)
  if $PROGRESS.nil? then
    Kernel.puts(*args)
  else
    $PROGRESS.log(*args)
  end
end

def get_tags(mkv_file)
  raw_xml = %x(mkvextract tags "#{mkv_file}")
  xml = REXML::Document.new raw_xml

  tags = Tags.new
  xml.elements.each("//Simple") do |tag|
    name_tag = tag.get_elements("Name")[0]
    string_tag = tag.get_elements("String")[0]
    if not name_tag.nil? and not string_tag.nil? then
      name = name_tag.text
      value = string_tag.text

      tags << SimpleTag.new(name, value)
    else
      puts "Invalid SimpleTag: #{tag}"
    end
  end

  return tags
end

def set_tags(mkv_file, tags)
  title = tags[:title].value

  tmp = Tempfile.new('tags')
  begin
    tmp.write(tags.to_xml)
    tmp.flush

    %x{mkvpropedit "#{mkv_file}" -e info -s "title=#{title}" \
    --tags global:#{tmp.path}}
  ensure
    tmp.close
    tmp.unlink
  end
end

def parse_filename_for_tags(mkv_file)
  tags = Tags.new
  base = File.basename(mkv_file, '.mkv')

  part_number = nil
  title = nil
  date_released = nil

  tv_show = /E(?<part_number>[\d.]+)(?:,\d+)? - (?<title>.+)/
  movie = /(?:(?<part_number>\d+)\. )?(?<title>[^_]+)(?:_(?<date_released>\d+))?/
  match = base.match(tv_show)
  if match.nil? then
    match = base.match(movie)

    if (match.names.include? "date_released" and
        not match["date_released"].nil?) then
      underscore_index = base.rindex('_')
      new_name = base[0...underscore_index] + '.mkv'
      dir = File.dirname(mkv_file)
      new_file = File.expand_path(new_name, dir)
      FileUtils.move(mkv_file, new_file)
      mkv_file = new_file
    end
  end

  for tag in ["part_number", "title", "date_released"] do
    if match.names.include? tag and not match[tag].nil? then
      tags << SimpleTag.new(tag, match[tag])
    end
  end

  return tags, mkv_file
end

def get_srt_files(vid_file, dirs)
  base_dir = File.dirname(vid_file)
  base = File.basename(vid_file)
  base = base[0, base.rindex('.')]

  matches = []

  dirs.each do |dir|
    dir = File.expand_path(dir, base_dir)
    glob = File.expand_path("#{escape_glob(base)}*.srt", escape_glob(dir))
    matches += Dir.glob(glob)
  end

  return matches
end

def escape_glob(s)
  s.gsub(/[\\\{\}\[\]\*\?]/) { |x| "\\"+x }
end

def combine(vid_file, srt_files = [])
  srts = []
  srt_files.each do |srt|
    base_srt = File.basename(srt, '.srt')
    if base_srt =~ /_(\w+)$/ then
      srts << "--language"
      srts << "0:#{$1}"
    end
    srts << "\"#{srt}\""
  end
  final_file = vid_file[0, vid_file.rindex('.')] + '.mkv'

  tmp = Tempfile.new('')
  begin
    output = %x{mkvmerge --default-language eng -o "#{tmp.path}" "#{vid_file}" \
    #{srts.join(' ')}}

    if $?.success? then
      FileUtils.rm(vid_file)
      FileUtils.rm(srt_files)

      FileUtils.mv(tmp.path, final_file)
    else
      puts output
    end
  ensure
    tmp.close
    tmp.unlink
  end
end

def extract_srt_files(vid_file)
  extension = vid_file[/\.\w+$/]
  case extension
  when ".mp4", ".m4v"
    subtitles = parse_mp4_subtitle_tracks(vid_file)
    root = vid_file[0, vid_file.rindex('.')]

    srt_files = []

    subtitles.each do |lang, track|
      srt_file = "#{root}_#{lang}.srt"
      File.open(srt_file, 'w') do |file|
        file.write(%x{MP4Box "#{vid_file}" -srt #{track} -std 2>#{$LOG}})
        srt_files << srt_file
      end
    end

    return srt_files
  else
    return []
  end
end

def parse_mp4_subtitle_tracks(mp4_file)
  languages = create_language_map()
  # Language => Track Number
  subtitles = {}

  track_number = nil
  language = nil
  %x{MP4Box -info "#{mp4_file}" 2>&1}.each_line do |line|
    case line
    when /TrackID (\d+)/
      track_number = $1.to_i
    when /Language "([^"]+)" - Type "(\w+):(\w+)"/
      language = languages[$1]
      if $2 == "sbtl" then
        subtitles[language] = track_number
      end
    when /Timed Text/
      subtitles[language] = track_number
    end
  end

  return subtitles
end

def create_language_map()
  languages = %x{MP4Box -languages 2>&1 | tail -n+3}
  langs = { "Undetermined" => "und" }
  langs.default = "und"
  languages.each_line do |line|
    if line =~ /^(.+) \((\w{3}) - \w{2}?\)$/ then
      $1.split(";").each do |lang|
        langs[lang.chomp] = $2
      end
    else
      puts "Unknown line #{line}"
    end
  end

  return langs
end

$LOG = "/dev/null"
options = OpenStruct.new
options.read_tags = false

options.parse_filenames = false
options.parse_transform = {}

options.combine = false
options.srt_dirs = [ ".", "./subs/", "./subtitles/" ]

options.convert = false

OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options] video_files+"

  opts.on('-r', '--read-tags [tag1,tag2,...]', Array,
          "Read tags from the given video files.") do |tags|
    options.read_tags = true
    options.tags = tags || []
    options.tags.sort!
  end

  opts.on('-p', '--parse-file-names', "Parse filenames for tags.") do |p|
    options.parse_filenames = true
  end

  opts.on('-t', '--transform-title [in]/[out]',
          "Transform titles that are parsed using tr") do |a|
    input, output = a.split("/")
    input.chars.zip(output.chars).each do |i,o|
      options.parse_transform[i] = o
    end
  end

  opts.on('-s', '--combine-subtitles',
          "Look for srt files for the given video files.") do |s|
    options.combine = true
  end

  opts.on('-c', '--convert-to-mkv',
          "Convert given video files to mkv.") do |c|
    options.convert = true
  end

end.parse!

if options.read_tags and options.tags.size == 1 and
  File.exists?(options.tags[0]) then
  ARGV.insert(0, options.tags[0])
  options.tags = []
end

ARGV.delete_if(&File.method(:directory?))

if options.convert then
  $PROGRESS = ProgressBar.create(:title => "Converting", :total => ARGV.size)
  ARGV.each do |file|
    puts file

    srt_files = extract_srt_files(file)
    combine(file, srt_files)

    $PROGRESS.increment
  end
end

if options.combine then
  $PROGRESS = ProgressBar.create(:title => "Combining", :total => ARGV.size)
  errors = []
  ARGV.each do |file|
    puts file

    srt_files = get_srt_files(file, options.srt_dirs)
    puts "Found : #{srt_files}"

    if not srt_files.empty? then
      combine(file, srt_files)
    else
      errors << "Could not find srt for #{file}"
    end

    $PROGRESS.increment
  end

  puts errors
end

if options.parse_filenames then
  $PROGRESS = ProgressBar.create(:title => "Parsing", :total => ARGV.size)
  ARGV.each do |file|

    old_tags = get_tags(file)
    new_tags,file = parse_filename_for_tags(file)
    options.parse_transform.each do |i,o|
      new_tags[:title].value.sub!(i, o)
    end

    all_tags = old_tags + new_tags
    if all_tags != old_tags then
      puts file
      set_tags(file, all_tags)
    end

    $PROGRESS.increment
  end
end

if options.read_tags then
  ARGV.each do |file|
    puts file if ARGV.size > 1
    tab = ARGV.size > 1 ? "\t" : ""

    tags = get_tags(file)
    if options.tags.empty? then
      get_tags(file).to_s.each_line do |line|
        puts "#{tab}#{line}"
      end
    else
      options.tags.each do |tag|
        puts "#{tab}#{tags[tag.downcase.intern].value}"
      end
    end
  end
end
